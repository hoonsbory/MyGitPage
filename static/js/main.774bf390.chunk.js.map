{"version":3,"sources":["logo.svg","component/header.js","component/aboutMe.js","component/project.js","component/skills.js","component/contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","header","window","addEventListener","this","scrollTo","document","console","log","getElementsByClassName","scrollHeight","scrollY","setAttribute","className","id","onClick","getElementById","scrollIntoView","Component","aboutMe","src","process","project","skills","contact","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,4JCItBC,G,wLAEjBC,OAAOC,iBAAiB,QAAO,WAC7BC,KAAKF,OAAOG,SAAS,EAAE,MACvB,K,+BAaF,OATAC,SAASH,iBAAiB,UAAU,WAClCI,QAAQC,IAAIF,SAASG,uBAAuB,gBAAgB,GAAGC,cAC5DR,OAAOS,SAASL,SAASG,uBAAuB,gBAAgB,GAAGC,aAAaJ,SAASG,uBAAuB,0BAA0B,GAAGC,cAAcJ,SAASG,uBAAuB,0BAA0B,GACtNH,SAASG,uBAAuB,0BAA0B,GAAGG,aAAa,QAAQ,sDAElFN,SAASG,uBAAuB,0BAA0B,GAAGG,aAAa,QAAQ,6BAKpF,yBAAKC,UAAU,UACb,6BAASC,GAAG,OAAOD,UAAU,gBAC3B,+IACA,mDACA,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,cAAcE,QAAS,kBAAMb,OAAOG,SAAS,EAAG,KAA7D,QACA,uBAAGQ,UAAU,cAAcE,QAAS,kBAAMT,SAASU,eAAe,WAAWC,mBAA7E,WACA,uBAAGJ,UAAU,cAAcE,QAAS,kBAAMT,SAASU,eAAe,WAAWC,mBAA7E,WACA,uBAAGJ,UAAU,cAAcE,QAAS,kBAAMT,SAASU,eAAe,UAAUC,mBAA5E,UACA,uBAAGJ,UAAU,cAAcE,QAAS,kBAAMT,SAASU,eAAe,WAAWC,mBAA7E,WACA,0BAAMJ,UAAU,8B,GA5BQK,cCHfC,E,uKAEb,OACI,6BACI,6BAASN,UAAU,WAAWC,GAAG,WAC7B,yBAAKM,IAAKC,8C,GALOH,aCChBI,E,uKAEb,OACI,6BACI,6BAAST,UAAU,WAAWC,GAAG,WAC7B,qCACA,2D,GANiBI,aCAhBK,E,uKAEb,OACI,6BACI,6BAASV,UAAU,WAAWC,GAAG,UAC7B,uCACA,6D,GANgBI,aCAfM,E,uKAEb,OACI,6BACI,6BAASX,UAAU,WAAWC,GAAG,WAC7B,qCACA,2D,GANiBI,aCmBtBO,MAZf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJca,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASU,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.774bf390.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport '../css/header.css';\r\n\r\n\r\nexport default class header extends Component {\r\n  componentDidMount(){\r\n    window.addEventListener('load',function(){\r\n      this.window.scrollTo(0,1);\r\n    },false)\r\n  }\r\n\r\n  render(){\r\n    document.addEventListener('scroll', function() {\r\n      console.log(document.getElementsByClassName(\"et-hero-tabs\")[0].scrollHeight);\r\n      if(window.scrollY>=document.getElementsByClassName(\"et-hero-tabs\")[0].scrollHeight-document.getElementsByClassName(\"et-hero-tabs-container\")[0].scrollHeight&&document.getElementsByClassName(\"et-hero-tabs-container\")[0]){\r\n        document.getElementsByClassName(\"et-hero-tabs-container\")[0].setAttribute(\"class\",\"et-hero-tabs-container et-hero-tabs-container--top\")\r\n      }else{\r\n        document.getElementsByClassName(\"et-hero-tabs-container\")[0].setAttribute(\"class\",\"et-hero-tabs-container\");\r\n      }\r\n  });\r\n    \r\n    return (\r\n      <div className=\"header\">\r\n        <section id=\"fuck\" className=\"et-hero-tabs\">\r\n          <h1>풀스택 개발자를 꿈꾸는 신입개발자입니다</h1>\r\n          <h3>FullStack Developer</h3>\r\n          <div className=\"et-hero-tabs-container\">\r\n            <a className=\"et-hero-tab\" onClick={() => window.scrollTo(0, 0)}>Home</a>\r\n            <a className=\"et-hero-tab\" onClick={() => document.getElementById(\"aboutMe\").scrollIntoView()}>AboutMe</a>\r\n            <a className=\"et-hero-tab\" onClick={() => document.getElementById(\"project\").scrollIntoView()}>Project</a>\r\n            <a className=\"et-hero-tab\" onClick={() => document.getElementById(\"skills\").scrollIntoView()}>Skills</a>\r\n            <a className=\"et-hero-tab\" onClick={() => document.getElementById(\"contact\").scrollIntoView()}>Contact</a>\r\n            <span className=\"et-hero-tab-slider\"></span>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nexport default class aboutMe extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"et-slide\" id=\"aboutMe\">\r\n                    <img src={process.env.PUBLIC_URL + \"/images/그림1.png\"}></img>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class project extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"et-slide\" id=\"project\">\r\n                    <h1>React</h1>\r\n                    <h3>something about react</h3>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class skills extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"et-slide\" id=\"skills\">\r\n                    <h1>Angular</h1>\r\n                    <h3>something about angular</h3>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class contact extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"et-slide\" id=\"contact\">\r\n                    <h1>Other</h1>\r\n                    <h3>something about other</h3>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './component/header';\nimport AboutMe from './component/aboutMe'\nimport Project from './component/project'\nimport Skills from './component/skills'\nimport Contact from './component/contact';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <AboutMe></AboutMe>\n      <Project></Project>\n      <Skills></Skills>\n      <Contact></Contact>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}